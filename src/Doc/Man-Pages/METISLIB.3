.TH METISLIB 3  
.SH NAME
PMETIS, KMETIS, OMETIS - interface to the METIS graph partitioning and sparse matrix ordering package
.SH SYNOPSIS
.nf
.ft B
PMETIS(n, xadj, adjncy, vwgts, ewgts, weightflag, nparts, 
       options, numbering, edgecut, partition)
int *n, *xadj, *adjncy, *vwgts, *ewgts, *weightflag, 
    *nparts, options[5], *numbering, *edgecut, *partition;
.ft
.fi
.LP
.nf
.ft B
KMETIS(n, xadj, adjncy, vwgts, ewgts, weightflag, nparts, 
       options, numbering, edgecut, partition)
int *n, *xadj, *adjncy, *vwgts, *ewgts, *weightflag, 
    *nparts, options[5], *numbering, *edgecut, *partition;
.ft
.fi
.LP
.nf
.ft B
OMETIS(n, xadj, adjncy, options, numbering, edgecut, 
       perm, invperm)
int *n, *xadj, *adjncy, options[5], *numbering, 
    *edgecut, *perm, *invperm;
.ft
.fi
.SH DESCRIPTION
.LP
.B METISLIB
provides a library interface to the
.METIS
graph partitioning and matrix ordering package.

.B PMETIS
partitions a graph using multilevel recursive bisection algorithm,
.B KMETIS
partitions a graph using multilevel k-way partitioning algorithm,
and 
.B OMETIS
produces a fill reducing ordering for sparse direct Cholesky factorization
using multilevel nested dissection.

The input to these routines is the adjacency structure of the graph and the weights
of the vertices and edges (if any). In particular, a graph with 
.B n 
vertices and
.B m 
edges is represented in 
.B METISLIB 
by four arrays. These arrays are
.B xadj[n+1],
.B adjncy[m], 
.B vwgts[n], 
and 
.B ewgts[m].
The arrays xadj and adjncy 
are used to store the adjacency structure of the
graph, while the arrays vwgts and ewgts 
are  used to store the weights of the vertices and edges respectively. If the graph 
is unweighted, the arrays vwgts and ewgts are NULL.
The adjacency structure of the graph is stored as follows. Assuming that vertex
numbering starts from 0 (C style), then the adjacency list of vertex 
.B i 
is stored in the vtxs[i]...vtxs[i+1]-1 section of array adjncy
(\ie., adjncy[vtxs[i]] through and including adjncy[vtxs[i+1]-1]).
If the graph has weights on the edges, then the weight of edge 
adjncy[j] is stored in ewgts[j], and if the graph has weights on the vertices, then 
vwgts[i] stores the weight of vertex 
.B i. 
.B METISLIB
also allows vertex numbering to start from 1 (Fortran style). 
In that case it is assumed that the arrays are passed from a Fortran program.

.B METISLIB
allocates all the memory it requires dynamically. This has the advantage
that the user does not have to provide workspace, but if there is not enough memory,
the routines abort. 
Note that these routines do not modify arrays that store the graph,
but instead they make a private copy of them.


.TP
.B n
The number of vertices in the graph.
.TP 
.B xadj, adjncy
The adjacency structure of the graph.
.TP
.B vwgts, ewgts
The information about the weights of the vertices and edges.
.TP
.B weightflag
Used to indicate if the graph is weighted. 
.B weightflag 
can take the following three values:
.RS
.RS
.TP
.B 0
No weights (vwgts and ewgts are NULL)
.TP
.B 1
Weights on the edges only (vwgts = NULL)
.TP
.B 2
Weights on the vertices only (ewgts = NULL)
.TP
.B 3
Weights both on vertices and edges.
.RE
.RE
.TP
.B nparts
The number of parts to partition the graph.
.TP
.B options
This is an array of 5 integers that is used to pass parameters for the various
phases of the algorithm. If 
.B options[0]=0 
then default values are used.
If 
.B options[0]=1, 
then the remaining four elements of 
.B options 
are interpreted as follows 
(see metis(1) for the allowable values).
.RS
.RS
.TP
.B options[1]
The number of vertices to coarsen down to (CoarsenTo)
.TP
.B options[2]
The matching type (MType)
.TP
.B options[3]
The initial partitioning algorithm (IPType)
.TP
.B options[4]
The refinement type (RType)
.RE
.RE
In the case of 
.B KMETIS options[3] 
is unused.

.TP
.B numbering
.RS
.RS
.TP
.B numbering=0
C-style numbering is assumed that starts from 0.
.TP
.B numbering=1
Fortran-style numbering is assumed that starts from 1.
.RE
.RE

.TP
.B edgecut
Upon successful completion, this variable stores the edge-cut of the partition.

.TP
.B partition
This is a vector of size 
.B n 
and upon successful completion stores the partition vector of the graph.

.TP
.B perm, invperm
These are vectors each of size 
.B n 
and upon successful completion they store the fill-reducing permutation 
and inverse-permutation.  Also, depending on the value of 
.B numbering, 
the permutation vectors start from 0 or 1. 


.SH ADDITIONAL DOCUMENTATION
A postscript copy of the manual of 
.B METIS
that describes 
.B METISLIB
and other similar algorithms is available on WWW at:
.B http://www.cs.umn.edu/~karypis/metis/manual.ps


.SH AUTHOR
George Karypis
.SH DIAGNOSTICS
Diagnostic messages are intended to be self-explanatory.
.SH "SEE ALSO"
metis(1), pmetis(1), kmetis(1), ometis(1)
.SH BUGS
If you find any bugs please report them to
.B karypis@cs.umn.edu
.





